import sf, { IOptionToGrab, ISpiralFramework } from '@spiral-toolkit/core';
import { AutocompleteDataSource } from './AutocompleteDataSource';
import { AutocompleteDropdown } from './AutocompleteDropdown';
import { AutocompleteTags } from './AutocompleteTags';
import { IAutocompleteOptions, IAutocompleteData, IAutocompleteDataItem } from './types';
export declare class Autocomplete extends sf.core.BaseDOMConstructor {
    static readonly spiralFrameworkName: string;
    readonly name: string;
    static defaultOptions: IAutocompleteOptions;
    el?: HTMLDivElement;
    readonly optionsToGrab: {
        [option: string]: IOptionToGrab;
    };
    options: IAutocompleteOptions;
    sf: ISpiralFramework;
    textInput: HTMLInputElement;
    textInputWrapper: HTMLDivElement;
    hiddenInput: HTMLInputElement;
    dataSource?: AutocompleteDataSource;
    dropdown?: AutocompleteDropdown;
    tags?: AutocompleteTags;
    currentTextValue?: string;
    currentDataItem?: IAutocompleteDataItem;
    currentDataItems?: IAutocompleteDataItem[];
    suggestTemplate?: Function;
    inputTemplate?: Function;
    observer: MutationObserver;
    isDisabled: boolean;
    isInnerClick?: boolean;
    isInnerFocus?: boolean;
    constructor(ssf: ISpiralFramework, node: Element, options: IAutocompleteOptions);
    initDataSource(): void;
    initTemplates(): void;
    initDropdown(): void;
    initTags(): void;
    changeHiddenInput(value: string): void;
    setDataItem(dataItem: IAutocompleteDataItem, isSave?: boolean): void;
    clearDataItem(): void;
    resetDataItem(): void;
    focusInput(): void;
    clearSuggestions(): void;
    getSuggestions(value: string): void;
    resetHiddenInputValue(): void;
    handleSuccessDataSourceResponse(search: string, suggestions: IAutocompleteData): void;
    handleErrorDataSourceResponse(): void;
    handleRestoreDataItem(dataItems: IAutocompleteDataItem[]): void;
    setExternalValue(value?: string): void;
    handleFocus(): void;
    handleBlur(): void;
    handleKeyDown(event: KeyboardEvent): void;
    handleInput(): void;
    handleSelectDropdownItem(dataItem: IAutocompleteDataItem, isSave?: boolean): void;
    handleFocusDropdownItem(dataItem: IAutocompleteDataItem): void;
    handleBlurDropdown(): void;
    handleAddTag(dataItem: IAutocompleteDataItem): void;
    handleRemoveTag(dataItem: IAutocompleteDataItem): void;
    handleInsideClick(): void;
    handleOutsideClick(): void;
    handleMutation(mutation: MutationRecord): void;
    bind(): void;
    die(): void;
}
export default Autocomplete;
